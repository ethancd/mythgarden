# Generated by Django 4.1.5 on 2023-04-19 19:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('mythgarden', '0068_building_closing_time_building_opening_time_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Knowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=255)),
                ('knowledge_type', models.CharField(choices=[('ITEM_KNOWLEDGE', 'Item knowledge'), ('VILLAGER_KNOWLEDGE', 'Villager knowledge'), ('MYTHEGG_KNOWLEDGE', 'Mythegg knowledge')], max_length=18)),
            ],
        ),
        migrations.RemoveField(
            model_name='item',
            name='icon',
        ),
        migrations.AlterField(
            model_name='achievement',
            name='name',
            field=models.CharField(max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='achievement',
            name='trigger_type',
            field=models.CharField(choices=[('SCORE_POINTS', 'Score points'), ('GAIN_HEARTS', 'Gain hearts'), ('TALK_TO_VILLAGERS', 'Talk to villagers'), ('GAIN_ACHIEVEMENT', 'Gain achievement'), ('EARN_MONEY', 'Earn money'), ('HARVEST', 'Harvest'), ('GATHER', 'Gather')], max_length=24),
        ),
        migrations.AlterField(
            model_name='item',
            name='item_type',
            field=models.CharField(choices=[('SEED', 'Seed'), ('SPROUT', 'Sprout'), ('CROP', 'Crop'), ('SOIL', 'Soil'), ('MYTHEGG', 'Mythegg'), ('GIFT', 'Gift'), ('FISH', 'Fish'), ('MINERAL', 'Mineral'), ('FOSSIL', 'Fossil'), ('TECH', 'Tech'), ('MAGIC', 'Magic'), ('HERB', 'Herb'), ('FLOWER', 'Flower'), ('BERRY', 'Berry')], default='GIFT', max_length=8),
        ),
        migrations.AlterField(
            model_name='item',
            name='rarity',
            field=models.CharField(choices=[('COMMON', 'common'), ('UNCOMMON', 'uncommon'), ('RARE', 'rare'), ('EPIC', 'epic'), ('MYTHIC', 'mythic')], default='COMMON', max_length=8),
        ),
        migrations.AlterField(
            model_name='itemtypepreference',
            name='item_type',
            field=models.CharField(choices=[('SEED', 'Seed'), ('SPROUT', 'Sprout'), ('CROP', 'Crop'), ('SOIL', 'Soil'), ('MYTHEGG', 'Mythegg'), ('GIFT', 'Gift'), ('FISH', 'Fish'), ('MINERAL', 'Mineral'), ('FOSSIL', 'Fossil'), ('TECH', 'Tech'), ('MAGIC', 'Magic'), ('HERB', 'Herb'), ('FLOWER', 'Flower'), ('BERRY', 'Berry')], max_length=8),
        ),
        migrations.CreateModel(
            name='ItemKnowledge',
            fields=[
                ('knowledge_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mythgarden.knowledge')),
                ('item_type', models.CharField(choices=[('SEED', 'Seed'), ('SPROUT', 'Sprout'), ('CROP', 'Crop'), ('SOIL', 'Soil'), ('MYTHEGG', 'Mythegg'), ('GIFT', 'Gift'), ('FISH', 'Fish'), ('MINERAL', 'Mineral'), ('FOSSIL', 'Fossil'), ('TECH', 'Tech'), ('MAGIC', 'Magic'), ('HERB', 'Herb'), ('FLOWER', 'Flower'), ('BERRY', 'Berry')], max_length=8)),
                ('rarity', models.CharField(choices=[('COMMON', 'common'), ('UNCOMMON', 'uncommon'), ('RARE', 'rare'), ('EPIC', 'epic'), ('MYTHIC', 'mythic')], max_length=8)),
            ],
            bases=('mythgarden.knowledge',),
        ),
        migrations.CreateModel(
            name='Mythling',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mythgarden.item')),
                ('image_path', models.CharField(blank=True, default='default.png', max_length=255, null=True)),
                ('mythling_type', models.CharField(choices=[('SPOOPY', 'spoopy'), ('VERDANT', 'verdant'), ('CORAL', 'coral'), ('SPARKLY', 'sparkly'), ('GOLDEN', 'golden'), ('RAINBOW', 'rainbow')], max_length=7)),
                ('growth_stage', models.CharField(choices=[('MYTHEGG', 'mythegg'), ('MYTHLING', 'mythling'), ('MYTHIMAL', 'mythimal')], max_length=8)),
                ('acquisition_increase_step', models.FloatField(blank=True, null=True)),
                ('favorite_soil', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_mythegg', to='mythgarden.item')),
                ('special_response_villager', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_mythegg', to='mythgarden.villager')),
            ],
            bases=('mythgarden.item',),
        ),
        migrations.AddField(
            model_name='knowledge',
            name='unlocking_achievement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mythgarden.achievement'),
        ),
        migrations.AddField(
            model_name='hero',
            name='knowledge',
            field=models.ManyToManyField(blank=True, to='mythgarden.knowledge'),
        ),
        migrations.CreateModel(
            name='VillagerKnowledge',
            fields=[
                ('knowledge_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mythgarden.knowledge')),
                ('valence', models.CharField(choices=[('LOVE', 'love'), ('LIKE', 'like'), ('NEUTRAL', 'neutral'), ('DISLIKE', 'dislike'), ('HATE', 'hate')], max_length=7)),
                ('villager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mythgarden.villager')),
            ],
            bases=('mythgarden.knowledge',),
        ),
        migrations.CreateModel(
            name='MytheggKnowledge',
            fields=[
                ('knowledge_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mythgarden.knowledge')),
                ('mythegg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mythgarden.mythling')),
            ],
            bases=('mythgarden.knowledge',),
        ),
    ]
